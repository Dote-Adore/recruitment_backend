/*
 * This file is generated by jOOQ.
 */
package com.doteadore.recruitment_backend.codegen.tables.daos;


import com.doteadore.recruitment_backend.codegen.tables.Useraccont;
import com.doteadore.recruitment_backend.codegen.tables.records.UseraccontRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UseraccontDao extends DAOImpl<UseraccontRecord, com.doteadore.recruitment_backend.codegen.tables.pojos.Useraccont, String> {

    /**
     * Create a new UseraccontDao without any configuration
     */
    public UseraccontDao() {
        super(Useraccont.USERACCONT, com.doteadore.recruitment_backend.codegen.tables.pojos.Useraccont.class);
    }

    /**
     * Create a new UseraccontDao with an attached configuration
     */
    @Autowired
    public UseraccontDao(Configuration configuration) {
        super(Useraccont.USERACCONT, com.doteadore.recruitment_backend.codegen.tables.pojos.Useraccont.class, configuration);
    }

    @Override
    public String getId(com.doteadore.recruitment_backend.codegen.tables.pojos.Useraccont object) {
        return object.getAccount();
    }

    /**
     * Fetch records that have <code>account BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.doteadore.recruitment_backend.codegen.tables.pojos.Useraccont> fetchRangeOfAccount(String lowerInclusive, String upperInclusive) {
        return fetchRange(Useraccont.USERACCONT.ACCOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>account IN (values)</code>
     */
    public List<com.doteadore.recruitment_backend.codegen.tables.pojos.Useraccont> fetchByAccount(String... values) {
        return fetch(Useraccont.USERACCONT.ACCOUNT, values);
    }

    /**
     * Fetch a unique record that has <code>account = value</code>
     */
    public com.doteadore.recruitment_backend.codegen.tables.pojos.Useraccont fetchOneByAccount(String value) {
        return fetchOne(Useraccont.USERACCONT.ACCOUNT, value);
    }

    /**
     * Fetch records that have <code>nickName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.doteadore.recruitment_backend.codegen.tables.pojos.Useraccont> fetchRangeOfNickname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Useraccont.USERACCONT.NICKNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>nickName IN (values)</code>
     */
    public List<com.doteadore.recruitment_backend.codegen.tables.pojos.Useraccont> fetchByNickname(String... values) {
        return fetch(Useraccont.USERACCONT.NICKNAME, values);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.doteadore.recruitment_backend.codegen.tables.pojos.Useraccont> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(Useraccont.USERACCONT.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<com.doteadore.recruitment_backend.codegen.tables.pojos.Useraccont> fetchByPassword(String... values) {
        return fetch(Useraccont.USERACCONT.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>avatarUrl BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.doteadore.recruitment_backend.codegen.tables.pojos.Useraccont> fetchRangeOfAvatarurl(String lowerInclusive, String upperInclusive) {
        return fetchRange(Useraccont.USERACCONT.AVATARURL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>avatarUrl IN (values)</code>
     */
    public List<com.doteadore.recruitment_backend.codegen.tables.pojos.Useraccont> fetchByAvatarurl(String... values) {
        return fetch(Useraccont.USERACCONT.AVATARURL, values);
    }
}
