/*
 * This file is generated by jOOQ.
 */
package com.doteadore.recruitment_backend.codegen.tables;


import com.doteadore.recruitment_backend.codegen.Indexes;
import com.doteadore.recruitment_backend.codegen.Keys;
import com.doteadore.recruitment_backend.codegen.Recruitment;
import com.doteadore.recruitment_backend.codegen.tables.records.ResumeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Resume extends TableImpl<ResumeRecord> {

    private static final long serialVersionUID = 980813047;

    /**
     * The reference instance of <code>Recruitment.Resume</code>
     */
    public static final Resume RESUME = new Resume();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResumeRecord> getRecordType() {
        return ResumeRecord.class;
    }

    /**
     * The column <code>Recruitment.Resume.id</code>.
     */
    public final TableField<ResumeRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Recruitment.Resume.userid</code>. 外键（对应UserAccount:account)
     */
    public final TableField<ResumeRecord, String> USERID = createField(DSL.name("userid"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "外键（对应UserAccount:account)");

    /**
     * The column <code>Recruitment.Resume.jobId</code>. 外键对应（JobOffer：id)
     */
    public final TableField<ResumeRecord, Integer> JOBID = createField(DSL.name("jobId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "外键对应（JobOffer：id)");

    /**
     * The column <code>Recruitment.Resume.name</code>. 真实姓名
     */
    public final TableField<ResumeRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "真实姓名");

    /**
     * The column <code>Recruitment.Resume.sex</code>. 性别
     */
    public final TableField<ResumeRecord, Integer> SEX = createField(DSL.name("sex"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "性别");

    /**
     * The column <code>Recruitment.Resume.school</code>. 毕业学校
     */
    public final TableField<ResumeRecord, String> SCHOOL = createField(DSL.name("school"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "毕业学校");

    /**
     * The column <code>Recruitment.Resume.graduationYear</code>. 毕业年份
     */
    public final TableField<ResumeRecord, Integer> GRADUATIONYEAR = createField(DSL.name("graduationYear"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "毕业年份");

    /**
     * The column <code>Recruitment.Resume.education</code>. 最高学历
     */
    public final TableField<ResumeRecord, Integer> EDUCATION = createField(DSL.name("education"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "最高学历");

    /**
     * The column <code>Recruitment.Resume.city</code>. 所在城市
     */
    public final TableField<ResumeRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "所在城市");

    /**
     * The column <code>Recruitment.Resume.tele</code>. 电话
     */
    public final TableField<ResumeRecord, String> TELE = createField(DSL.name("tele"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "电话");

    /**
     * The column <code>Recruitment.Resume.email</code>. 邮箱
     */
    public final TableField<ResumeRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "邮箱");

    /**
     * The column <code>Recruitment.Resume.attatchmentUrl</code>. 可下载的简历附件
     */
    public final TableField<ResumeRecord, String> ATTATCHMENTURL = createField(DSL.name("attatchmentUrl"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "可下载的简历附件");

    /**
     * The column <code>Recruitment.Resume.state</code>. 状态
     */
    public final TableField<ResumeRecord, Integer> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "状态");

    /**
     * The column <code>Recruitment.Resume.isPassed</code>. 0表示未通过，1表示通过，2表示还没结果
     */
    public final TableField<ResumeRecord, Integer> ISPASSED = createField(DSL.name("isPassed"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "0表示未通过，1表示通过，2表示还没结果");

    /**
     * The column <code>Recruitment.Resume.stateTime</code>. 状态更新时间
     */
    public final TableField<ResumeRecord, LocalDateTime> STATETIME = createField(DSL.name("stateTime"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "状态更新时间");

    /**
     * The column <code>Recruitment.Resume.postTime</code>. 投递时间
     */
    public final TableField<ResumeRecord, LocalDateTime> POSTTIME = createField(DSL.name("postTime"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "投递时间");

    /**
     * The column <code>Recruitment.Resume.companyID</code>. 公司号
     */
    public final TableField<ResumeRecord, String> COMPANYID = createField(DSL.name("companyID"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "公司号");

    /**
     * Create a <code>Recruitment.Resume</code> table reference
     */
    public Resume() {
        this(DSL.name("Resume"), null);
    }

    /**
     * Create an aliased <code>Recruitment.Resume</code> table reference
     */
    public Resume(String alias) {
        this(DSL.name(alias), RESUME);
    }

    /**
     * Create an aliased <code>Recruitment.Resume</code> table reference
     */
    public Resume(Name alias) {
        this(alias, RESUME);
    }

    private Resume(Name alias, Table<ResumeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Resume(Name alias, Table<ResumeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Resume(Table<O> child, ForeignKey<O, ResumeRecord> key) {
        super(child, key, RESUME);
    }

    @Override
    public Schema getSchema() {
        return Recruitment.RECRUITMENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RESUME_RESUME_FK1, Indexes.RESUME_RESUME_FK2, Indexes.RESUME_RESUME_FK3);
    }

    @Override
    public Identity<ResumeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RESUME;
    }

    @Override
    public UniqueKey<ResumeRecord> getPrimaryKey() {
        return Keys.KEY_RESUME_PRIMARY;
    }

    @Override
    public List<UniqueKey<ResumeRecord>> getKeys() {
        return Arrays.<UniqueKey<ResumeRecord>>asList(Keys.KEY_RESUME_PRIMARY);
    }

    @Override
    public List<ForeignKey<ResumeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ResumeRecord, ?>>asList(Keys.RESUME_FK1, Keys.RESUME_FK2, Keys.RESUME_FK3);
    }

    public Useraccont useraccont() {
        return new Useraccont(this, Keys.RESUME_FK1);
    }

    public Joboffer joboffer() {
        return new Joboffer(this, Keys.RESUME_FK2);
    }

    public Education education() {
        return new Education(this, Keys.RESUME_FK3);
    }

    @Override
    public Resume as(String alias) {
        return new Resume(DSL.name(alias), this);
    }

    @Override
    public Resume as(Name alias) {
        return new Resume(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Resume rename(String name) {
        return new Resume(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Resume rename(Name name) {
        return new Resume(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Integer, String, Integer, String, Integer, String, Integer, Integer, String, String, String, String, Integer, Integer, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
