/*
 * This file is generated by jOOQ.
 */
package com.doteadore.recruitment_backend.codegen.tables;


import com.doteadore.recruitment_backend.codegen.Indexes;
import com.doteadore.recruitment_backend.codegen.Keys;
import com.doteadore.recruitment_backend.codegen.Recruitment;
import com.doteadore.recruitment_backend.codegen.tables.records.HomepushapplicationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Homepushapplication extends TableImpl<HomepushapplicationRecord> {

    private static final long serialVersionUID = -1926122518;

    /**
     * The reference instance of <code>Recruitment.HomePushApplication</code>
     */
    public static final Homepushapplication HOMEPUSHAPPLICATION = new Homepushapplication();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HomepushapplicationRecord> getRecordType() {
        return HomepushapplicationRecord.class;
    }

    /**
     * The column <code>Recruitment.HomePushApplication.id</code>.
     */
    public final TableField<HomepushapplicationRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Recruitment.HomePushApplication.companyId</code>. 外键关联（CompanyAccount:account)
     */
    public final TableField<HomepushapplicationRecord, String> COMPANYID = createField(DSL.name("companyId"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "外键关联（CompanyAccount:account)");

    /**
     * The column <code>Recruitment.HomePushApplication.endtime</code>. 申请截止时间
     */
    public final TableField<HomepushapplicationRecord, LocalDateTime> ENDTIME = createField(DSL.name("endtime"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "申请截止时间");

    /**
     * The column <code>Recruitment.HomePushApplication.handleAdminId</code>. 处理该消息的管理员Id，空表示无人处理
     */
    public final TableField<HomepushapplicationRecord, String> HANDLEADMINID = createField(DSL.name("handleAdminId"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "处理该消息的管理员Id，空表示无人处理");

    /**
     * The column <code>Recruitment.HomePushApplication.handleTime</code>. 处理时间
     */
    public final TableField<HomepushapplicationRecord, LocalDateTime> HANDLETIME = createField(DSL.name("handleTime"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "处理时间");

    /**
     * The column <code>Recruitment.HomePushApplication.handleRes</code>. 处理结果（0表示不通过，1表示通过）
     */
    public final TableField<HomepushapplicationRecord, Integer> HANDLERES = createField(DSL.name("handleRes"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "处理结果（0表示不通过，1表示通过）");

    /**
     * The column <code>Recruitment.HomePushApplication.handleResponseContent</code>. 处理人的处理批复
     */
    public final TableField<HomepushapplicationRecord, String> HANDLERESPONSECONTENT = createField(DSL.name("handleResponseContent"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "处理人的处理批复");

    /**
     * The column <code>Recruitment.HomePushApplication.hasReadByCompany</code>. 是否被企业查看（0表示未查看，1表示已查看）
     */
    public final TableField<HomepushapplicationRecord, Integer> HASREADBYCOMPANY = createField(DSL.name("hasReadByCompany"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "是否被企业查看（0表示未查看，1表示已查看）");

    /**
     * The column <code>Recruitment.HomePushApplication.jobOfferId</code>. 想要申请的招聘号，外键对应（JobOffer:id)
     */
    public final TableField<HomepushapplicationRecord, Integer> JOBOFFERID = createField(DSL.name("jobOfferId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "想要申请的招聘号，外键对应（JobOffer:id)");

    /**
     * Create a <code>Recruitment.HomePushApplication</code> table reference
     */
    public Homepushapplication() {
        this(DSL.name("HomePushApplication"), null);
    }

    /**
     * Create an aliased <code>Recruitment.HomePushApplication</code> table reference
     */
    public Homepushapplication(String alias) {
        this(DSL.name(alias), HOMEPUSHAPPLICATION);
    }

    /**
     * Create an aliased <code>Recruitment.HomePushApplication</code> table reference
     */
    public Homepushapplication(Name alias) {
        this(alias, HOMEPUSHAPPLICATION);
    }

    private Homepushapplication(Name alias, Table<HomepushapplicationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Homepushapplication(Name alias, Table<HomepushapplicationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Homepushapplication(Table<O> child, ForeignKey<O, HomepushapplicationRecord> key) {
        super(child, key, HOMEPUSHAPPLICATION);
    }

    @Override
    public Schema getSchema() {
        return Recruitment.RECRUITMENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HOMEPUSHAPPLICATION_HOMEPUSHAPPLICATION_FK1, Indexes.HOMEPUSHAPPLICATION_HOMEPUSHAPPLICATION_FK2, Indexes.HOMEPUSHAPPLICATION_HOMEPUSHAPPLICATION_FK3);
    }

    @Override
    public Identity<HomepushapplicationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_HOMEPUSHAPPLICATION;
    }

    @Override
    public UniqueKey<HomepushapplicationRecord> getPrimaryKey() {
        return Keys.KEY_HOMEPUSHAPPLICATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<HomepushapplicationRecord>> getKeys() {
        return Arrays.<UniqueKey<HomepushapplicationRecord>>asList(Keys.KEY_HOMEPUSHAPPLICATION_PRIMARY);
    }

    @Override
    public List<ForeignKey<HomepushapplicationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<HomepushapplicationRecord, ?>>asList(Keys.HOMEPUSHAPPLICATION_FK1, Keys.HOMEPUSHAPPLICATION_FK3, Keys.HOMEPUSHAPPLICATION_FK2);
    }

    public Companyaccount companyaccount() {
        return new Companyaccount(this, Keys.HOMEPUSHAPPLICATION_FK1);
    }

    public Adminaccount adminaccount() {
        return new Adminaccount(this, Keys.HOMEPUSHAPPLICATION_FK3);
    }

    public Joboffer joboffer() {
        return new Joboffer(this, Keys.HOMEPUSHAPPLICATION_FK2);
    }

    @Override
    public Homepushapplication as(String alias) {
        return new Homepushapplication(DSL.name(alias), this);
    }

    @Override
    public Homepushapplication as(Name alias) {
        return new Homepushapplication(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Homepushapplication rename(String name) {
        return new Homepushapplication(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Homepushapplication rename(Name name) {
        return new Homepushapplication(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, LocalDateTime, String, LocalDateTime, Integer, String, Integer, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
