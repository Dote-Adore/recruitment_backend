/*
 * This file is generated by jOOQ.
 */
package com.doteadore.recruitment_backend.codegen.tables.records;


import com.doteadore.recruitment_backend.codegen.tables.Adminaccount;
import com.doteadore.recruitment_backend.codegen.tables.interfaces.IAdminaccount;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminaccountRecord extends UpdatableRecordImpl<AdminaccountRecord> implements Record3<String, String, String>, IAdminaccount {

    private static final long serialVersionUID = -1929664158;

    /**
     * Setter for <code>Recruitment.AdminAccount.account</code>. 管理员账号
     */
    @Override
    public void setAccount(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>Recruitment.AdminAccount.account</code>. 管理员账号
     */
    @Override
    public String getAccount() {
        return (String) get(0);
    }

    /**
     * Setter for <code>Recruitment.AdminAccount.name</code>. 名称
     */
    @Override
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>Recruitment.AdminAccount.name</code>. 名称
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>Recruitment.AdminAccount.password</code>. 密码
     */
    @Override
    public void setPassword(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>Recruitment.AdminAccount.password</code>. 密码
     */
    @Override
    public String getPassword() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Adminaccount.ADMINACCOUNT.ACCOUNT;
    }

    @Override
    public Field<String> field2() {
        return Adminaccount.ADMINACCOUNT.NAME;
    }

    @Override
    public Field<String> field3() {
        return Adminaccount.ADMINACCOUNT.PASSWORD;
    }

    @Override
    public String component1() {
        return getAccount();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getPassword();
    }

    @Override
    public String value1() {
        return getAccount();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getPassword();
    }

    @Override
    public AdminaccountRecord value1(String value) {
        setAccount(value);
        return this;
    }

    @Override
    public AdminaccountRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public AdminaccountRecord value3(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public AdminaccountRecord values(String value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IAdminaccount from) {
        setAccount(from.getAccount());
        setName(from.getName());
        setPassword(from.getPassword());
    }

    @Override
    public <E extends IAdminaccount> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AdminaccountRecord
     */
    public AdminaccountRecord() {
        super(Adminaccount.ADMINACCOUNT);
    }

    /**
     * Create a detached, initialised AdminaccountRecord
     */
    public AdminaccountRecord(String account, String name, String password) {
        super(Adminaccount.ADMINACCOUNT);

        set(0, account);
        set(1, name);
        set(2, password);
    }
}
