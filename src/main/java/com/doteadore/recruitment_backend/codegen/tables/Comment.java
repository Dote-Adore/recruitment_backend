/*
 * This file is generated by jOOQ.
 */
package com.doteadore.recruitment_backend.codegen.tables;


import com.doteadore.recruitment_backend.codegen.Indexes;
import com.doteadore.recruitment_backend.codegen.Keys;
import com.doteadore.recruitment_backend.codegen.Recruitment;
import com.doteadore.recruitment_backend.codegen.tables.records.CommentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Comment extends TableImpl<CommentRecord> {

    private static final long serialVersionUID = 1631994342;

    /**
     * The reference instance of <code>Recruitment.Comment</code>
     */
    public static final Comment COMMENT = new Comment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommentRecord> getRecordType() {
        return CommentRecord.class;
    }

    /**
     * The column <code>Recruitment.Comment.id</code>.
     */
    public final TableField<CommentRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Recruitment.Comment.jobOfferId</code>. 外键对应（JobOffer：id)
     */
    public final TableField<CommentRecord, Integer> JOBOFFERID = createField(DSL.name("jobOfferId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "外键对应（JobOffer：id)");

    /**
     * The column <code>Recruitment.Comment.accountType</code>. 1为企业，2为管理员，3为用户
     */
    public final TableField<CommentRecord, Integer> ACCOUNTTYPE = createField(DSL.name("accountType"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "1为企业，2为管理员，3为用户");

    /**
     * The column <code>Recruitment.Comment.accountId</code>. 评论者id 对应（UserAccount:account)
     */
    public final TableField<CommentRecord, String> ACCOUNTID = createField(DSL.name("accountId"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "评论者id 对应（UserAccount:account)");

    /**
     * The column <code>Recruitment.Comment.responseId</code>. 回复者id 对应（UserAccount:account)
     */
    public final TableField<CommentRecord, String> RESPONSEID = createField(DSL.name("responseId"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "回复者id 对应（UserAccount:account)");

    /**
     * The column <code>Recruitment.Comment.time</code>. 评论或回复时间
     */
    public final TableField<CommentRecord, LocalDateTime> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "评论或回复时间");

    /**
     * The column <code>Recruitment.Comment.content</code>. 评论或回复内容
     */
    public final TableField<CommentRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "评论或回复内容");

    /**
     * Create a <code>Recruitment.Comment</code> table reference
     */
    public Comment() {
        this(DSL.name("Comment"), null);
    }

    /**
     * Create an aliased <code>Recruitment.Comment</code> table reference
     */
    public Comment(String alias) {
        this(DSL.name(alias), COMMENT);
    }

    /**
     * Create an aliased <code>Recruitment.Comment</code> table reference
     */
    public Comment(Name alias) {
        this(alias, COMMENT);
    }

    private Comment(Name alias, Table<CommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Comment(Name alias, Table<CommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Comment(Table<O> child, ForeignKey<O, CommentRecord> key) {
        super(child, key, COMMENT);
    }

    @Override
    public Schema getSchema() {
        return Recruitment.RECRUITMENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMMENT_COMMENT_FK1, Indexes.COMMENT_COMMENT_FK2, Indexes.COMMENT_COMMENT_FK3);
    }

    @Override
    public Identity<CommentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMMENT;
    }

    @Override
    public UniqueKey<CommentRecord> getPrimaryKey() {
        return Keys.KEY_COMMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<CommentRecord>> getKeys() {
        return Arrays.<UniqueKey<CommentRecord>>asList(Keys.KEY_COMMENT_PRIMARY);
    }

    @Override
    public List<ForeignKey<CommentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CommentRecord, ?>>asList(Keys.COMMENT_FK1, Keys.COMMENT_FK2, Keys.COMMENT_FK3);
    }

    public Joboffer joboffer() {
        return new Joboffer(this, Keys.COMMENT_FK1);
    }

    public Useraccont commentFk2() {
        return new Useraccont(this, Keys.COMMENT_FK2);
    }

    public Useraccont commentFk3() {
        return new Useraccont(this, Keys.COMMENT_FK3);
    }

    @Override
    public Comment as(String alias) {
        return new Comment(DSL.name(alias), this);
    }

    @Override
    public Comment as(Name alias) {
        return new Comment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(String name) {
        return new Comment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(Name name) {
        return new Comment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, Integer, String, String, LocalDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
