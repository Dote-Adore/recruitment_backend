/*
 * This file is generated by jOOQ.
 */
package com.doteadore.recruitment_backend.codegen.tables;


import com.doteadore.recruitment_backend.codegen.Keys;
import com.doteadore.recruitment_backend.codegen.Recruitment;
import com.doteadore.recruitment_backend.codegen.tables.records.CompanyaccountRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Companyaccount extends TableImpl<CompanyaccountRecord> {

    private static final long serialVersionUID = 782602928;

    /**
     * The reference instance of <code>Recruitment.CompanyAccount</code>
     */
    public static final Companyaccount COMPANYACCOUNT = new Companyaccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyaccountRecord> getRecordType() {
        return CompanyaccountRecord.class;
    }

    /**
     * The column <code>Recruitment.CompanyAccount.account</code>. 账号
     */
    public final TableField<CompanyaccountRecord, String> ACCOUNT = createField(DSL.name("account"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "账号");

    /**
     * The column <code>Recruitment.CompanyAccount.name</code>. 企业名
     */
    public final TableField<CompanyaccountRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "企业名");

    /**
     * The column <code>Recruitment.CompanyAccount.password</code>. 密码
     */
    public final TableField<CompanyaccountRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "密码");

    /**
     * The column <code>Recruitment.CompanyAccount.url</code>. 企业网址
     */
    public final TableField<CompanyaccountRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "企业网址");

    /**
     * The column <code>Recruitment.CompanyAccount.description</code>. 描述
     */
    public final TableField<CompanyaccountRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "描述");

    /**
     * The column <code>Recruitment.CompanyAccount.tele</code>. 电话
     */
    public final TableField<CompanyaccountRecord, String> TELE = createField(DSL.name("tele"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "电话");

    /**
     * The column <code>Recruitment.CompanyAccount.avatarUrl</code>. 头像
     */
    public final TableField<CompanyaccountRecord, String> AVATARURL = createField(DSL.name("avatarUrl"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "头像");

    /**
     * Create a <code>Recruitment.CompanyAccount</code> table reference
     */
    public Companyaccount() {
        this(DSL.name("CompanyAccount"), null);
    }

    /**
     * Create an aliased <code>Recruitment.CompanyAccount</code> table reference
     */
    public Companyaccount(String alias) {
        this(DSL.name(alias), COMPANYACCOUNT);
    }

    /**
     * Create an aliased <code>Recruitment.CompanyAccount</code> table reference
     */
    public Companyaccount(Name alias) {
        this(alias, COMPANYACCOUNT);
    }

    private Companyaccount(Name alias, Table<CompanyaccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private Companyaccount(Name alias, Table<CompanyaccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Companyaccount(Table<O> child, ForeignKey<O, CompanyaccountRecord> key) {
        super(child, key, COMPANYACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return Recruitment.RECRUITMENT;
    }

    @Override
    public UniqueKey<CompanyaccountRecord> getPrimaryKey() {
        return Keys.KEY_COMPANYACCOUNT_PRIMARY;
    }

    @Override
    public List<UniqueKey<CompanyaccountRecord>> getKeys() {
        return Arrays.<UniqueKey<CompanyaccountRecord>>asList(Keys.KEY_COMPANYACCOUNT_PRIMARY);
    }

    @Override
    public Companyaccount as(String alias) {
        return new Companyaccount(DSL.name(alias), this);
    }

    @Override
    public Companyaccount as(Name alias) {
        return new Companyaccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Companyaccount rename(String name) {
        return new Companyaccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Companyaccount rename(Name name) {
        return new Companyaccount(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
