/*
 * This file is generated by jOOQ.
 */
package com.doteadore.recruitment_backend.codegen.tables;


import com.doteadore.recruitment_backend.codegen.Keys;
import com.doteadore.recruitment_backend.codegen.Recruitment;
import com.doteadore.recruitment_backend.codegen.tables.records.AdminaccountRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Adminaccount extends TableImpl<AdminaccountRecord> {

    private static final long serialVersionUID = -1478839631;

    /**
     * The reference instance of <code>Recruitment.AdminAccount</code>
     */
    public static final Adminaccount ADMINACCOUNT = new Adminaccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminaccountRecord> getRecordType() {
        return AdminaccountRecord.class;
    }

    /**
     * The column <code>Recruitment.AdminAccount.account</code>. 管理员账号
     */
    public final TableField<AdminaccountRecord, String> ACCOUNT = createField(DSL.name("account"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "管理员账号");

    /**
     * The column <code>Recruitment.AdminAccount.name</code>. 名称
     */
    public final TableField<AdminaccountRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "名称");

    /**
     * The column <code>Recruitment.AdminAccount.password</code>. 密码
     */
    public final TableField<AdminaccountRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "密码");

    /**
     * Create a <code>Recruitment.AdminAccount</code> table reference
     */
    public Adminaccount() {
        this(DSL.name("AdminAccount"), null);
    }

    /**
     * Create an aliased <code>Recruitment.AdminAccount</code> table reference
     */
    public Adminaccount(String alias) {
        this(DSL.name(alias), ADMINACCOUNT);
    }

    /**
     * Create an aliased <code>Recruitment.AdminAccount</code> table reference
     */
    public Adminaccount(Name alias) {
        this(alias, ADMINACCOUNT);
    }

    private Adminaccount(Name alias, Table<AdminaccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private Adminaccount(Name alias, Table<AdminaccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Adminaccount(Table<O> child, ForeignKey<O, AdminaccountRecord> key) {
        super(child, key, ADMINACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return Recruitment.RECRUITMENT;
    }

    @Override
    public UniqueKey<AdminaccountRecord> getPrimaryKey() {
        return Keys.KEY_ADMINACCOUNT_PRIMARY;
    }

    @Override
    public List<UniqueKey<AdminaccountRecord>> getKeys() {
        return Arrays.<UniqueKey<AdminaccountRecord>>asList(Keys.KEY_ADMINACCOUNT_PRIMARY);
    }

    @Override
    public Adminaccount as(String alias) {
        return new Adminaccount(DSL.name(alias), this);
    }

    @Override
    public Adminaccount as(Name alias) {
        return new Adminaccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Adminaccount rename(String name) {
        return new Adminaccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Adminaccount rename(Name name) {
        return new Adminaccount(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
