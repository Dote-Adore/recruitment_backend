/*
 * This file is generated by jOOQ.
 */
package com.doteadore.recruitment_backend.codegen.tables.records;


import com.doteadore.recruitment_backend.codegen.tables.Professiontype;
import com.doteadore.recruitment_backend.codegen.tables.interfaces.IProfessiontype;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProfessiontypeRecord extends UpdatableRecordImpl<ProfessiontypeRecord> implements Record2<Integer, String>, IProfessiontype {

    private static final long serialVersionUID = -2100905475;

    /**
     * Setter for <code>Recruitment.ProfessionType.key</code>.
     */
    @Override
    public void setKey(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>Recruitment.ProfessionType.key</code>.
     */
    @Override
    public Integer getKey() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>Recruitment.ProfessionType.value</code>.
     */
    @Override
    public void setValue(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>Recruitment.ProfessionType.value</code>.
     */
    @Override
    public String getValue() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Professiontype.PROFESSIONTYPE.KEY;
    }

    @Override
    public Field<String> field2() {
        return Professiontype.PROFESSIONTYPE.VALUE;
    }

    @Override
    public Integer component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getValue();
    }

    @Override
    public Integer value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getValue();
    }

    @Override
    public ProfessiontypeRecord value1(Integer value) {
        setKey(value);
        return this;
    }

    @Override
    public ProfessiontypeRecord value2(String value) {
        setValue(value);
        return this;
    }

    @Override
    public ProfessiontypeRecord values(Integer value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IProfessiontype from) {
        setKey(from.getKey());
        setValue(from.getValue());
    }

    @Override
    public <E extends IProfessiontype> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProfessiontypeRecord
     */
    public ProfessiontypeRecord() {
        super(Professiontype.PROFESSIONTYPE);
    }

    /**
     * Create a detached, initialised ProfessiontypeRecord
     */
    public ProfessiontypeRecord(Integer key, String value) {
        super(Professiontype.PROFESSIONTYPE);

        set(0, key);
        set(1, value);
    }
}
