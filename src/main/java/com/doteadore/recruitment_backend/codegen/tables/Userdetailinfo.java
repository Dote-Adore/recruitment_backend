/*
 * This file is generated by jOOQ.
 */
package com.doteadore.recruitment_backend.codegen.tables;


import com.doteadore.recruitment_backend.codegen.Keys;
import com.doteadore.recruitment_backend.codegen.Recruitment;
import com.doteadore.recruitment_backend.codegen.tables.records.UserdetailinfoRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Userdetailinfo extends TableImpl<UserdetailinfoRecord> {

    private static final long serialVersionUID = 1836878935;

    /**
     * The reference instance of <code>Recruitment.UserDetailInfo</code>
     */
    public static final Userdetailinfo USERDETAILINFO = new Userdetailinfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserdetailinfoRecord> getRecordType() {
        return UserdetailinfoRecord.class;
    }

    /**
     * The column <code>Recruitment.UserDetailInfo.account</code>. 用户账号
     */
    public final TableField<UserdetailinfoRecord, String> ACCOUNT = createField(DSL.name("account"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "用户账号");

    /**
     * The column <code>Recruitment.UserDetailInfo.name</code>. 用户姓名
     */
    public final TableField<UserdetailinfoRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "用户姓名");

    /**
     * The column <code>Recruitment.UserDetailInfo.sex</code>. 性别（0代表女，1代表男）
     */
    public final TableField<UserdetailinfoRecord, Integer> SEX = createField(DSL.name("sex"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "性别（0代表女，1代表男）");

    /**
     * The column <code>Recruitment.UserDetailInfo.school</code>. 所在学校
     */
    public final TableField<UserdetailinfoRecord, String> SCHOOL = createField(DSL.name("school"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "所在学校");

    /**
     * The column <code>Recruitment.UserDetailInfo.graduationYear</code>. 毕业年份
     */
    public final TableField<UserdetailinfoRecord, Integer> GRADUATIONYEAR = createField(DSL.name("graduationYear"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "毕业年份");

    /**
     * The column <code>Recruitment.UserDetailInfo.education</code>. 最高学历
     */
    public final TableField<UserdetailinfoRecord, String> EDUCATION = createField(DSL.name("education"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "最高学历");

    /**
     * The column <code>Recruitment.UserDetailInfo.tele</code>. 电话
     */
    public final TableField<UserdetailinfoRecord, String> TELE = createField(DSL.name("tele"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "电话");

    /**
     * The column <code>Recruitment.UserDetailInfo.email</code>. 邮箱
     */
    public final TableField<UserdetailinfoRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "邮箱");

    /**
     * The column <code>Recruitment.UserDetailInfo.city</code>.
     */
    public final TableField<UserdetailinfoRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>Recruitment.UserDetailInfo.description</code>.
     */
    public final TableField<UserdetailinfoRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>Recruitment.UserDetailInfo</code> table reference
     */
    public Userdetailinfo() {
        this(DSL.name("UserDetailInfo"), null);
    }

    /**
     * Create an aliased <code>Recruitment.UserDetailInfo</code> table reference
     */
    public Userdetailinfo(String alias) {
        this(DSL.name(alias), USERDETAILINFO);
    }

    /**
     * Create an aliased <code>Recruitment.UserDetailInfo</code> table reference
     */
    public Userdetailinfo(Name alias) {
        this(alias, USERDETAILINFO);
    }

    private Userdetailinfo(Name alias, Table<UserdetailinfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Userdetailinfo(Name alias, Table<UserdetailinfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Userdetailinfo(Table<O> child, ForeignKey<O, UserdetailinfoRecord> key) {
        super(child, key, USERDETAILINFO);
    }

    @Override
    public Schema getSchema() {
        return Recruitment.RECRUITMENT;
    }

    @Override
    public UniqueKey<UserdetailinfoRecord> getPrimaryKey() {
        return Keys.KEY_USERDETAILINFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserdetailinfoRecord>> getKeys() {
        return Arrays.<UniqueKey<UserdetailinfoRecord>>asList(Keys.KEY_USERDETAILINFO_PRIMARY);
    }

    @Override
    public List<ForeignKey<UserdetailinfoRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserdetailinfoRecord, ?>>asList(Keys.USERDETAILINFO_FK1);
    }

    public Useraccont useraccont() {
        return new Useraccont(this, Keys.USERDETAILINFO_FK1);
    }

    @Override
    public Userdetailinfo as(String alias) {
        return new Userdetailinfo(DSL.name(alias), this);
    }

    @Override
    public Userdetailinfo as(Name alias) {
        return new Userdetailinfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Userdetailinfo rename(String name) {
        return new Userdetailinfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Userdetailinfo rename(Name name) {
        return new Userdetailinfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, Integer, String, Integer, String, String, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
