/*
 * This file is generated by jOOQ.
 */
package com.doteadore.recruitment_backend.codegen.tables.records;


import com.doteadore.recruitment_backend.codegen.tables.Useraccont;
import com.doteadore.recruitment_backend.codegen.tables.interfaces.IUseraccont;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UseraccontRecord extends UpdatableRecordImpl<UseraccontRecord> implements Record4<String, String, String, String>, IUseraccont {

    private static final long serialVersionUID = 1077142234;

    /**
     * Setter for <code>Recruitment.UserAccont.account</code>. 账号
     */
    @Override
    public void setAccount(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>Recruitment.UserAccont.account</code>. 账号
     */
    @Override
    public String getAccount() {
        return (String) get(0);
    }

    /**
     * Setter for <code>Recruitment.UserAccont.nickName</code>. 昵称（非真实姓名）
     */
    @Override
    public void setNickname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>Recruitment.UserAccont.nickName</code>. 昵称（非真实姓名）
     */
    @Override
    public String getNickname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>Recruitment.UserAccont.password</code>. 密码
     */
    @Override
    public void setPassword(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>Recruitment.UserAccont.password</code>. 密码
     */
    @Override
    public String getPassword() {
        return (String) get(2);
    }

    /**
     * Setter for <code>Recruitment.UserAccont.avatarUrl</code>. 头像
     */
    @Override
    public void setAvatarurl(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>Recruitment.UserAccont.avatarUrl</code>. 头像
     */
    @Override
    public String getAvatarurl() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Useraccont.USERACCONT.ACCOUNT;
    }

    @Override
    public Field<String> field2() {
        return Useraccont.USERACCONT.NICKNAME;
    }

    @Override
    public Field<String> field3() {
        return Useraccont.USERACCONT.PASSWORD;
    }

    @Override
    public Field<String> field4() {
        return Useraccont.USERACCONT.AVATARURL;
    }

    @Override
    public String component1() {
        return getAccount();
    }

    @Override
    public String component2() {
        return getNickname();
    }

    @Override
    public String component3() {
        return getPassword();
    }

    @Override
    public String component4() {
        return getAvatarurl();
    }

    @Override
    public String value1() {
        return getAccount();
    }

    @Override
    public String value2() {
        return getNickname();
    }

    @Override
    public String value3() {
        return getPassword();
    }

    @Override
    public String value4() {
        return getAvatarurl();
    }

    @Override
    public UseraccontRecord value1(String value) {
        setAccount(value);
        return this;
    }

    @Override
    public UseraccontRecord value2(String value) {
        setNickname(value);
        return this;
    }

    @Override
    public UseraccontRecord value3(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public UseraccontRecord value4(String value) {
        setAvatarurl(value);
        return this;
    }

    @Override
    public UseraccontRecord values(String value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUseraccont from) {
        setAccount(from.getAccount());
        setNickname(from.getNickname());
        setPassword(from.getPassword());
        setAvatarurl(from.getAvatarurl());
    }

    @Override
    public <E extends IUseraccont> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UseraccontRecord
     */
    public UseraccontRecord() {
        super(Useraccont.USERACCONT);
    }

    /**
     * Create a detached, initialised UseraccontRecord
     */
    public UseraccontRecord(String account, String nickname, String password, String avatarurl) {
        super(Useraccont.USERACCONT);

        set(0, account);
        set(1, nickname);
        set(2, password);
        set(3, avatarurl);
    }
}
