/*
 * This file is generated by jOOQ.
 */
package com.doteadore.recruitment_backend.codegen.tables;


import com.doteadore.recruitment_backend.codegen.Indexes;
import com.doteadore.recruitment_backend.codegen.Keys;
import com.doteadore.recruitment_backend.codegen.Recruitment;
import com.doteadore.recruitment_backend.codegen.tables.records.JobofferRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Joboffer extends TableImpl<JobofferRecord> {

    private static final long serialVersionUID = 1361465617;

    /**
     * The reference instance of <code>Recruitment.JobOffer</code>
     */
    public static final Joboffer JOBOFFER = new Joboffer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobofferRecord> getRecordType() {
        return JobofferRecord.class;
    }

    /**
     * The column <code>Recruitment.JobOffer.id</code>.
     */
    public final TableField<JobofferRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Recruitment.JobOffer.company</code>. 外键对应（CompanyAccount:account)
     */
    public final TableField<JobofferRecord, String> COMPANY = createField(DSL.name("company"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "外键对应（CompanyAccount:account)");

    /**
     * The column <code>Recruitment.JobOffer.professionType</code>. 职业类别
     */
    public final TableField<JobofferRecord, Integer> PROFESSIONTYPE = createField(DSL.name("professionType"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "职业类别");

    /**
     * The column <code>Recruitment.JobOffer.title</code>. 标题
     */
    public final TableField<JobofferRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "标题");

    /**
     * The column <code>Recruitment.JobOffer.description</code>. 描述
     */
    public final TableField<JobofferRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "描述");

    /**
     * The column <code>Recruitment.JobOffer.isDeleted</code>. 是否被删除
     */
    public final TableField<JobofferRecord, Integer> ISDELETED = createField(DSL.name("isDeleted"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "是否被删除");

    /**
     * The column <code>Recruitment.JobOffer.startTime</code>. 开始时间
     */
    public final TableField<JobofferRecord, LocalDateTime> STARTTIME = createField(DSL.name("startTime"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "开始时间");

    /**
     * The column <code>Recruitment.JobOffer.city</code>. 所在城市
     */
    public final TableField<JobofferRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "所在城市");

    /**
     * The column <code>Recruitment.JobOffer.endTime</code>. 结束时间
     */
    public final TableField<JobofferRecord, LocalDateTime> ENDTIME = createField(DSL.name("endTime"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "结束时间");

    /**
     * The column <code>Recruitment.JobOffer.position</code>.
     */
    public final TableField<JobofferRecord, Integer> POSITION = createField(DSL.name("position"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>Recruitment.JobOffer</code> table reference
     */
    public Joboffer() {
        this(DSL.name("JobOffer"), null);
    }

    /**
     * Create an aliased <code>Recruitment.JobOffer</code> table reference
     */
    public Joboffer(String alias) {
        this(DSL.name(alias), JOBOFFER);
    }

    /**
     * Create an aliased <code>Recruitment.JobOffer</code> table reference
     */
    public Joboffer(Name alias) {
        this(alias, JOBOFFER);
    }

    private Joboffer(Name alias, Table<JobofferRecord> aliased) {
        this(alias, aliased, null);
    }

    private Joboffer(Name alias, Table<JobofferRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Joboffer(Table<O> child, ForeignKey<O, JobofferRecord> key) {
        super(child, key, JOBOFFER);
    }

    @Override
    public Schema getSchema() {
        return Recruitment.RECRUITMENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.JOBOFFER_JOBOFFER_FK1, Indexes.JOBOFFER_JONOFFER_FK2, Indexes.JOBOFFER_POSITION);
    }

    @Override
    public Identity<JobofferRecord, Integer> getIdentity() {
        return Keys.IDENTITY_JOBOFFER;
    }

    @Override
    public UniqueKey<JobofferRecord> getPrimaryKey() {
        return Keys.KEY_JOBOFFER_PRIMARY;
    }

    @Override
    public List<UniqueKey<JobofferRecord>> getKeys() {
        return Arrays.<UniqueKey<JobofferRecord>>asList(Keys.KEY_JOBOFFER_PRIMARY);
    }

    @Override
    public List<ForeignKey<JobofferRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JobofferRecord, ?>>asList(Keys.JOBOFFER_FK1, Keys.JONOFFER_FK2, Keys.POSITION);
    }

    public Companyaccount companyaccount() {
        return new Companyaccount(this, Keys.JOBOFFER_FK1);
    }

    public Professiontype professiontype() {
        return new Professiontype(this, Keys.JONOFFER_FK2);
    }

    public Professionposition professionposition() {
        return new Professionposition(this, Keys.POSITION);
    }

    @Override
    public Joboffer as(String alias) {
        return new Joboffer(DSL.name(alias), this);
    }

    @Override
    public Joboffer as(Name alias) {
        return new Joboffer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Joboffer rename(String name) {
        return new Joboffer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Joboffer rename(Name name) {
        return new Joboffer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, Integer, String, String, Integer, LocalDateTime, String, LocalDateTime, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
