/*
 * This file is generated by jOOQ.
 */
package com.doteadore.recruitment_backend.codegen.tables;


import com.doteadore.recruitment_backend.codegen.Keys;
import com.doteadore.recruitment_backend.codegen.Recruitment;
import com.doteadore.recruitment_backend.codegen.tables.records.ResumestateRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Resumestate extends TableImpl<ResumestateRecord> {

    private static final long serialVersionUID = -1580985915;

    /**
     * The reference instance of <code>Recruitment.ResumeState</code>
     */
    public static final Resumestate RESUMESTATE = new Resumestate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResumestateRecord> getRecordType() {
        return ResumestateRecord.class;
    }

    /**
     * The column <code>Recruitment.ResumeState.key</code>.
     */
    public final TableField<ResumestateRecord, Integer> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Recruitment.ResumeState.value</code>.
     */
    public final TableField<ResumestateRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>Recruitment.ResumeState</code> table reference
     */
    public Resumestate() {
        this(DSL.name("ResumeState"), null);
    }

    /**
     * Create an aliased <code>Recruitment.ResumeState</code> table reference
     */
    public Resumestate(String alias) {
        this(DSL.name(alias), RESUMESTATE);
    }

    /**
     * Create an aliased <code>Recruitment.ResumeState</code> table reference
     */
    public Resumestate(Name alias) {
        this(alias, RESUMESTATE);
    }

    private Resumestate(Name alias, Table<ResumestateRecord> aliased) {
        this(alias, aliased, null);
    }

    private Resumestate(Name alias, Table<ResumestateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Resumestate(Table<O> child, ForeignKey<O, ResumestateRecord> key) {
        super(child, key, RESUMESTATE);
    }

    @Override
    public Schema getSchema() {
        return Recruitment.RECRUITMENT;
    }

    @Override
    public Identity<ResumestateRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RESUMESTATE;
    }

    @Override
    public UniqueKey<ResumestateRecord> getPrimaryKey() {
        return Keys.KEY_RESUMESTATE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ResumestateRecord>> getKeys() {
        return Arrays.<UniqueKey<ResumestateRecord>>asList(Keys.KEY_RESUMESTATE_PRIMARY);
    }

    @Override
    public Resumestate as(String alias) {
        return new Resumestate(DSL.name(alias), this);
    }

    @Override
    public Resumestate as(Name alias) {
        return new Resumestate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Resumestate rename(String name) {
        return new Resumestate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Resumestate rename(Name name) {
        return new Resumestate(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
